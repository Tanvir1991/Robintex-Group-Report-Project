using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Newtonsoft.Json;
using RTEXERP.DBEntities.dbo;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace RTEXERP.DAL.DataContext
{
    public class ReportDBContext : DbContext
    {


        public ReportDBContext(DbContextOptions<ReportDBContext> options) : base(options) { }
        #region Dbo
        public virtual DbSet<ApplicationLog> ApplicationLog { get; set; }
        public virtual DbSet<ApplicationSetting> ApplicationSetting { get; set; }
        public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserTokens> AspNetUserTokens { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<ChangeLog> ChangeLog { get; set; }
        public virtual DbSet<EmployeeWiseModule> EmployeeWiseModule { get; set; }
        public virtual DbSet<ModuleMenu> ModuleMenu { get; set; }
        public virtual DbSet<RoleWiseModule> RoleWiseModule { get; set; }

        #endregion

       

        #region
       
        #endregion
        //#region AppSecurity
        //public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        //#endregion

        

        #region Change Log
        public override async Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken))
        {
            var auditEntries = OnBeforeSaveChanges();
            var result = await base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
            await OnAfterSaveChanges(auditEntries);
            return result;
        }
        private List<ChangeLogEntry> OnBeforeSaveChanges()
        {
            ChangeTracker.DetectChanges();
            var changeLoEntries = new List<ChangeLogEntry>();
            foreach (var entry in ChangeTracker.Entries())
            {
                if (entry.Entity is ChangeLog || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                    continue;

                var changeEntry = new ChangeLogEntry(entry);
               // changeEntry.TableName = entry.Metadata.Relational().TableName;
                changeLoEntries.Add(changeEntry);

                foreach (var property in entry.Properties)
                {
                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        changeEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    string propertyName = property.Metadata.Name;
                    if (property.Metadata.IsPrimaryKey())
                    {
                        changeEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    switch (entry.State)
                    {
                        //case EntityState.Added:
                        //    changeEntry.NewValues[propertyName] = property.CurrentValue;
                        //    break;

                        case EntityState.Deleted:
                            changeEntry.OldValues[propertyName] = property.OriginalValue;
                            break;

                        case EntityState.Modified:
                            if (property.IsModified)
                            {
                                changeEntry.OldValues[propertyName] = property.OriginalValue;
                                changeEntry.NewValues[propertyName] = property.CurrentValue;
                            }
                            break;
                    }
                }
            }

            // Save audit entities that have all the modifications
            foreach (var auditEntry in changeLoEntries.Where(_ => !_.HasTemporaryProperties))
            {
                ChangeLog.Add(auditEntry.ToChangeLog());
            }

            // keep a list of entries where the value of some properties are unknown at this step
            return changeLoEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }

        private Task OnAfterSaveChanges(List<ChangeLogEntry> changeLogEntry)
        {
            if (changeLogEntry == null || changeLogEntry.Count == 0)
                return Task.CompletedTask;


            foreach (var log in changeLogEntry)
            {
                // Get the final value of the temporary properties
                foreach (var prop in log.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        log.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        log.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }
                if (log != null && log.NewValues.Count > 0)
                    // Save the Audit entry
                    ChangeLog.Add(log.ToChangeLog());
            }

            return SaveChangesAsync();
        }


        public class ChangeLogEntry
        {
            public ChangeLogEntry(EntityEntry entry)
            {
                Entry = entry;
            }

            public EntityEntry Entry { get; }
            public string TableName { get; set; }
            public Dictionary<string, object> KeyValues { get; } = new Dictionary<string, object>();
            public Dictionary<string, object> OldValues { get; } = new Dictionary<string, object>();
            public Dictionary<string, object> NewValues { get; } = new Dictionary<string, object>();
            public List<PropertyEntry> TemporaryProperties { get; } = new List<PropertyEntry>();

            public bool HasTemporaryProperties => TemporaryProperties.Any();

            public ChangeLog ToChangeLog()
            {
                var audit = new ChangeLog();
                audit.TableName = TableName;
                audit.ChangeDate = DateTime.UtcNow;
                audit.KeyValues = JsonConvert.SerializeObject(KeyValues);
                audit.OldValues = OldValues.Count == 0 ? null : JsonConvert.SerializeObject(OldValues);
                audit.NewValues = NewValues.Count == 0 ? null : JsonConvert.SerializeObject(NewValues);
                return audit;
            }
        }
        #endregion

        protected override void OnModelCreating(ModelBuilder modelBuilder)

        {
            base.OnModelCreating(modelBuilder);


         

            modelBuilder.Entity<ApplicationLog>(entity =>
            {
                entity.Property(e => e.ActionName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ActionUrl)
                    .HasColumnName("ActionURL")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ClientIp)
                    .HasColumnName("ClientIP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ControllerName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.ErrorDetail).IsUnicode(false);

                entity.Property(e => e.HttpMethod)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.OrganizationId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QueryStringParams)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RequestDetail).IsUnicode(false);

                entity.Property(e => e.RequestUser)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SessionId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserAgent)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ApplicationSetting>(entity =>
            {
                entity.Property(e => e.BankAccount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CashBook)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.LicenseEndDate).HasColumnType("date");

                entity.Property(e => e.LicenseNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LicenseStartDate).HasColumnType("date");

                entity.Property(e => e.MonthClosingDate).HasColumnType("date");

                entity.Property(e => e.OrganizationName).HasMaxLength(50);

                entity.Property(e => e.Placcount)
                    .HasColumnName("PLAccount")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.YearClosingDate).HasColumnType("date");
            });

            modelBuilder.Entity<AspNetRoleClaims>(entity =>
            {
                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetRoleClaims)
                    .HasForeignKey(d => d.RoleId);
            });

            modelBuilder.Entity<AspNetRoles>(entity =>
            {
                entity.Property(e => e.Name).HasMaxLength(256);

                entity.Property(e => e.NormalizedName).HasMaxLength(256);
            });

            modelBuilder.Entity<AspNetUserClaims>(entity =>
            {
                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserClaims)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserLogins>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserLogins)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserRoles>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.RoleId);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserTokens>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserTokens)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUsers>(entity =>
            {
                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.NormalizedEmail).HasMaxLength(256);

                entity.Property(e => e.NormalizedUserName).HasMaxLength(256);

                entity.Property(e => e.UserName).HasMaxLength(256);

                entity.Property(e => e.UserType)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

         

            modelBuilder.Entity<ChangeLog>(entity =>
            {
                entity.Property(e => e.ChangeDate).HasColumnType("datetime");

                entity.Property(e => e.KeyValues)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NewValues).IsUnicode(false);

                entity.Property(e => e.OldValues).IsUnicode(false);

                entity.Property(e => e.TableName)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });



            modelBuilder.Entity<EmployeeWiseModule>(entity =>
            {
                entity.HasKey(e => e.EmpModuleId)
                    .HasName("PK__Employee__B37BFEE4232AB672");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(256);
            });



           

            modelBuilder.Entity<ModuleMenu>(entity =>
            {
                entity.Property(e => e.ActionName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AreaName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ControllerName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LinkText)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LinkTextUn).HasMaxLength(400);

                entity.Property(e => e.MenuSymbol)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ModuleCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ModuleMenueCode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.UserType)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RoleWiseModule>(entity =>
            {
                entity.Property(e => e.CreateDate).HasColumnType("datetime");
            });




      

        

          

            #region AppSecurity
            modelBuilder.Entity<AspNetRoles>(entity =>
            {
                entity.ToTable("AspNetRoles", "dbo");
            });
            #endregion

            
        }





    }
}
