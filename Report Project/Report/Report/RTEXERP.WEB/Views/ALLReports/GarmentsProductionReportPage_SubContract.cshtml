@model RTEXERP.Contracts.BLModels.CMS.GarmentsProductionData
@{
    ViewData["Title"] = $"Oval Printing Report";
    Layout = null;
    int sl = 0;
    long workingHour = 0;
    long TotalWorkingHour = 0;
    string oldLine = "";
    decimal totalEarningBDT = 0;
    decimal totalEarningDol = 0;
    // decimal summeryProfit = 0;
    var OwnProduction = Model.InhouseGarmentsProductionList.Where(b => b.ISInhouse == 1).ToList();
    var SubContractProduction = Model.SubContractGarmentsProductionList.Where(b => b.ISInhouse == 0).ToList();

    var ownProductionLineSalary = OwnProduction.GroupBy(b => new { b.LineName, b.LineSalary }).ToList();
    var subcontractLineSalary = SubContractProduction.GroupBy(b => new { b.LineName, b.LineSalary }).ToList();

    decimal TotalsummeryProfit = 0;
    decimal OwnsummeryProfit = 0;
    decimal SubContractsummeryProfit = 0;
    decimal SubcontractLineTotalAmount = 0;

}
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="Mark Otto, Jacob Thornton, and Bootstrap contributors">
    <meta name="generator" content="Jekyll v3.8.6">
    <title>Garments Production Report</title>


    <meta name="theme-color" content="#563d7c">
    <link href="~/AdminLTE-3.1.0-rc/dist/css/adminlte.min.css" rel="stylesheet" />
    <script src="~/AdminLTE-3.1.0-rc/plugins/jquery/jquery.min.js"></script>
    @*<link rel="stylesheet" href="https:/ /stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
        <script src="https:/ /code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>*@

    <style>
        .bd-placeholder-img {
            font-size: 1.125rem;
            text-anchor: middle;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        table thead {
            text-align: center;
        }

        table {
            table-layout: fixed;
        }

        td {
            word-wrap: break-word
        }

        table.table-bordered {
            border: 1px solid #000;
            margin-top: 20px;
        }

            table.table-bordered > thead > tr > th {
                border: 1px solid #000;
            }

            table.table-bordered > tbody > tr > td {
                border: 1px solid #000;
            }

            table.table-bordered > tfoot > tr > td {
                border: 1px solid #000;
            }
    </style>
    <!-- Custom styles for this template -->
    <link href="~/css/BatchReportCss.css" rel="stylesheet" />
    <link href="~/css/landscapePrint.css" rel="stylesheet" />
    <link href="~/css/printCommon.css" rel="stylesheet" />

</head>
<body>
    <nav class="navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow d-print-none">
        <div class="navbar-brand col-sm-12 col-md-12 mr-0">Garments Production</div>
    </nav>

    <div class="container-fluid">
        <main role="main" class="col-md-12 ml-sm-auto col-lg-12 px-4 printArea">
            <div class="row">
                <div class="col-md-12" style="text-align:center;">
                    <span class="col-md-12" style="text-align:center;font-weight:bold;">Garments Production Report</span>
                    <br />
                    <span class="col-md-12" style="text-align:center;font-weight:bold;">Date Duration @Model.DateFrom To @Model.DateTo</span>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <table class="table table-bordered text-center" style="font-weight:bold;">
                        <tbody>
                            <tr>
                                <td>Production</td>
                                <td>@String.Format("{0:n0}", Model.InhouseGarmentsProductionList.Sum(b => b.Ttl_Ok_Qty))</td>
                                <td>Earning (USD)</td>
                                <td>@String.Format("{0:n0}", Model.InhouseGarmentsProductionList.Sum(b => b.TotalCMDol))</td>
                                <td>Earning BDT($=@String.Format("{0:n2}", Model.InhouseGarmentsProductionList[0].DollerRate))</td>
                                <td>@String.Format("{0:n0}", Model.InhouseGarmentsProductionList.Sum(b => b.TotalCMTk))</td>

                                @if (Model.InhouseGarmentsProductionList[0].IsShowSalary > 0)
                                {
                                    <td>Line Salary</td>
                                    <td>@String.Format("{0:n2}", Model.InhouseGarmentsProductionList[0].TotalSalary + Model.InhouseGarmentsProductionList.Sum(b => b.StyleSubContractAmount))</td>
                                    <td>Gross Profit</td>
                                    <td>@String.Format("{0:n2}", (Model.InhouseGarmentsProductionList.Sum(b => b.TotalCMTk) - (Model.InhouseGarmentsProductionList[0].TotalSalary + Model.InhouseGarmentsProductionList.Sum(b => b.StyleSubContractAmount))))</td>
                                }

                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="table-responsive-sm table-responsive-lg">
                        <h5 class="text-center mb-0 pb-0">Own Production</h5>
                        <table class="table table-striped table-sm  table-bordered mdReport borderColor mt-1 pt-0">
                            <thead>
                                <tr class="table-thead">
                                    <th style="width:30px;">SL</th>
                                    <th width="80">Production <br /> Date</th>
                                    <th width="80">Order NO</th>
                                    <th width="120">Style</th>
                                    <th>Color</th>
                                    <th width="60">Line <br /> Name</th>
                                    <th>Receive <br /> Quantity</th>
                                    <th>Alter <br /> Quantity</th>
                                    <th>Spot <br /> Quantity</th>
                                    <th>Reject <br /> Quantity</th>
                                    <th>Pass <br /> Quantity</th>
                                    <th>CM/PC</th>
                                    <th>Earning <br />(USD)</th>
                                    <th>Earning <br />(BDT)</th>
                                    <th style="display:none;">Working <br /> Duration</th>
                                    <th>Line <br /> Salary</th>
                                    <th>Profit</th>
                                    @*<th>Working <br /> Hours</th>*@
                                </tr>
                            </thead>
                            <tbody class="table-body">

                                @{
                                    if (OwnProduction.Count == 0)
                                    {
                                        <tr>
                                            <td class="text-center" style="font-weight:bold;" colspan="16">Production is empty on this duration.</td>
                                        </tr>
                                    }
                                    else
                                    {
                                        foreach (var aop in OwnProduction)
                                        {
                                            if (aop.LineName != oldLine)
                                            {
                                                totalEarningBDT = 0;
                                                totalEarningDol = 0;

                                            }
                                            sl = sl + 1;
                                            workingHour = Math.Abs(aop.StartHour.Value - aop.EndHour.Value);
                                            TotalWorkingHour += workingHour;
                                            <tr>
                                                <td>@sl</td>
                                                <td>@aop.ProductionDate</td>
                                                <td>@aop.OrderNo</td>
                                                <td>@aop.StyleName</td>
                                                <td>@aop.PantoneNo</td>
                                                <td>@aop.LineName</td>
                                                <td class="text-right">@aop.RcvQty</td>
                                                <td class="text-right">@aop.ALterQty</td>
                                                <td class="text-right">@aop.SpotQty</td>
                                                <td class="text-right">@aop.RejectQty</td>
                                                <td class="text-right">@aop.Ttl_Ok_Qty</td>
                                                <td class="text-right">@aop.CM_PC</td>
                                                @{
                                                    if (aop.LineName != oldLine)
                                                    {
                                                        totalEarningDol = Model.InhouseGarmentsProductionList.Where(l => l.LineName == aop.LineName).Sum(b => b.TotalCMDol);
                                                        <td rowspan="@aop.LineGroup" class="text-right" style="vertical-align:middle">@totalEarningDol</td>

                                                    }

                                                }
                                                @{
                                                    if (aop.LineName != oldLine)
                                                    {
                                                        totalEarningBDT = Model.InhouseGarmentsProductionList.Where(l => l.LineName == aop.LineName).Sum(b => b.TotalCMTk);

                                                        <td rowspan="@aop.LineGroup" class="text-right" style="vertical-align:middle">@totalEarningBDT</td>

                                                    }
                                                }


                                                <td style="display:none;" class="text-center">@aop.StartHour - @aop.EndHour</td>
                                                @{
                                                    if (aop.LineName != oldLine)
                                                    {
                                                        <td rowspan="@aop.LineGroup" class="text-right" style="vertical-align:middle">@aop.LineSalary</td>

                                                    }
                                                }
                                                @{
                                                    if (aop.LineName != oldLine)
                                                    {
                                                        TotalsummeryProfit += totalEarningBDT - aop.LineSalary;
                                                        OwnsummeryProfit += totalEarningBDT - aop.LineSalary;
                                                        <td rowspan="@aop.LineGroup" class="text-right" style="vertical-align:middle">@(totalEarningBDT - aop.LineSalary)</td>

                                                    }
                                                }

                                                @*<td class="text-right">@workingHour</td>*@
                                            </tr>
                                            oldLine = aop.LineName;
                                        }
                                        <tr class="table-thead" style="font-weight:bold;">
                                            <td class="text-right" colspan="6">Own Production Total</td>

                                            <td class="text-right">@String.Format("{0:n0}", OwnProduction.Sum(b => b.RcvQty))</td>
                                            <td class="text-right">@String.Format("{0:n0}", OwnProduction.Sum(b => b.ALterQty))</td>
                                            <td class="text-right">@String.Format("{0:n0}", OwnProduction.Sum(b => b.SpotQty))</td>
                                            <td class="text-right">@String.Format("{0:n0}", OwnProduction.Sum(b => b.RejectQty))</td>
                                            <td class="text-right">@String.Format("{0:n0}", OwnProduction.Sum(b => b.Ttl_Ok_Qty))</td>
                                            <td>&nbsp;</td>
                                            <td class="text-right">$ @String.Format("{0:n2}", OwnProduction.Sum(b => b.TotalCMDol))</td>
                                            <td class="text-right">@String.Format("{0:n2}", OwnProduction.Sum(b => b.TotalCMTk))</td>
                                            <td class="text-right">@String.Format("{0:n2}", ownProductionLineSalary.Sum(b => b.Key.LineSalary))</td>
                                            <td class="text-right">@String.Format("{0:n2}", OwnsummeryProfit)</td>
                                            @*<td>&nbsp;</td>*@
                                            @*<td class="text-right">@String.Format("{0:n0}", TotalWorkingHour)</td>*@
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>

                        <h5 class="text-center mb-0 pb-0">Subcontract</h5>
                        <table class="table table-striped table-sm  table-bordered mdReport borderColor mt-1 pt-0">
                            <thead>
                                <tr class="table-thead">
                                    <th style="width:30px;">SL</th>
                                    <th width="80">Production <br /> Date</th>
                                    <th width="80">Order NO</th>
                                    <th width="120">Style</th>
                                    <th>Color</th>
                                    <th width="60">Line <br /> Name</th>
                                    <th>Receive <br /> Quantity</th>
                                    <th>Alter <br /> Quantity</th>
                                    <th>Spot <br /> Quantity</th>
                                    <th>Reject <br /> Quantity</th>
                                    <th>Pass <br /> Quantity</th>
                                    <th>CM/PC</th>
                                    <th>Earning <br />(USD)</th>
                                    <th>Earning <br />(BDT)</th>
                                    <th style="display:none;">Working <br /> Duration</th>
                                    <th>Line <br /> Salary</th>
                                    <th>Subcontract <br /> Charge</th>
                                    <th>Total <br /> Cost</th>
                                    <th>Profit</th>
                                    @*<th>Working <br /> Hours</th>*@
                                </tr>
                            </thead>
                            <tbody class="table-body">

                                @{
                                    if (SubContractProduction.Count == 0)
                                    {
                                        <tr>
                                            <td class="text-center" style="font-weight:bold;" colspan="16">Subcontract is empty on this duration.</td>
                                        </tr>
                                    }
                                    else
                                    {
                                        totalEarningBDT = 0;
                                        totalEarningDol = 0;
                                        foreach (var aop in SubContractProduction)
                                        {
                                            if (aop.LineName != oldLine)
                                            {
                                                totalEarningBDT = 0;
                                                totalEarningDol = 0;
                                                SubcontractLineTotalAmount = 0;

                                            }
                                            sl = sl + 1;
                                            workingHour = Math.Abs(aop.StartHour.Value - aop.EndHour.Value);
                                            TotalWorkingHour += workingHour;
                                            <tr>
                                                <td>@sl</td>
                                                <td>@aop.ProductionDate</td>
                                                <td>@aop.OrderNo</td>
                                                <td>@aop.StyleName</td>
                                                <td>@aop.PantoneNo</td>
                                                <td>@aop.LineName</td>
                                                <td class="text-right">@aop.RcvQty</td>
                                                <td class="text-right">@aop.ALterQty</td>
                                                <td class="text-right">@aop.SpotQty</td>
                                                <td class="text-right">@aop.RejectQty</td>
                                                <td class="text-right">@aop.Ttl_Ok_Qty</td>
                                                <td class="text-right">@aop.CM_PC</td>
                                                @{
                                                    if (aop.LineName != oldLine)
                                                    {
                                                        totalEarningDol = Model.InhouseGarmentsProductionList.Where(l => l.LineName == aop.LineName).Sum(b => b.TotalCMDol);
                                                        <td rowspan="@aop.LineGroup" class="text-right" style="vertical-align:middle">@totalEarningDol</td>

                                                    }

                                                }
                                                @{
                                                    if (aop.LineName != oldLine)
                                                    {
                                                        totalEarningBDT = Model.InhouseGarmentsProductionList.Where(l => l.LineName == aop.LineName).Sum(b => b.TotalCMTk);

                                                        <td rowspan="@aop.LineGroup" class="text-right" style="vertical-align:middle">@totalEarningBDT</td>

                                                    }
                                                }


                                                <td style="display:none;" class="text-center">@aop.StartHour - @aop.EndHour</td>
                                                @{
                                                    if (aop.LineName != oldLine)
                                                    {
                                                        <td rowspan="@aop.LineGroup" class="text-right" style="vertical-align:middle">@aop.LineSalary</td>

                                                    }
                                                }
                                                <td class="text-right">@aop.StyleSubContractAmount</td>
                                                @{
                                                    if (aop.LineName != oldLine)
                                                    {
                                                        SubcontractLineTotalAmount = SubContractProduction.Where(l => l.LineName == aop.LineName).Sum(b => b.StyleSubContractAmount);
                                                        <td rowspan="@aop.LineGroup" class="text-right" style="vertical-align:middle">@Math.Round(aop.LineSalary + SubcontractLineTotalAmount)</td>

                                                    }
                                                }

                                                @{
                                                    if (aop.LineName != oldLine)
                                                    {
                                                        TotalsummeryProfit += totalEarningBDT - SubcontractLineTotalAmount;
                                                        SubContractsummeryProfit += totalEarningBDT - SubcontractLineTotalAmount;
                                                        <td rowspan="@aop.LineGroup" class="text-right" style="vertical-align:middle">@Math.Round(totalEarningBDT - SubcontractLineTotalAmount, 2)</td>

                                                    }
                                                }

                                                @*<td class="text-right">@workingHour</td>*@
                                            </tr>
                                            oldLine = aop.LineName;
                                        }
                                        <tr class="table-thead" style="font-weight:bold;">
                                            <td class="text-right" colspan="6">Subcontract Total</td>

                                            <td class="text-right">@String.Format("{0:n0}", SubContractProduction.Sum(b => b.RcvQty))</td>
                                            <td class="text-right">@String.Format("{0:n0}", SubContractProduction.Sum(b => b.ALterQty))</td>
                                            <td class="text-right">@String.Format("{0:n0}", SubContractProduction.Sum(b => b.SpotQty))</td>
                                            <td class="text-right">@String.Format("{0:n0}", SubContractProduction.Sum(b => b.RejectQty))</td>
                                            <td class="text-right">@String.Format("{0:n0}", SubContractProduction.Sum(b => b.Ttl_Ok_Qty))</td>
                                            <td>&nbsp;</td>
                                            <td class="text-right">$ @String.Format("{0:n2}", SubContractProduction.Sum(b => b.TotalCMDol))</td>
                                            <td class="text-right">@String.Format("{0:n2}", SubContractProduction.Sum(b => b.TotalCMTk))</td>
                                            <td class="text-right">@String.Format("{0:n2}", subcontractLineSalary.Sum(b => b.Key.LineSalary))</td>
                                            <td class="text-right">@String.Format("{0:n2}", SubContractProduction.Sum(b => b.StyleSubContractAmount))</td>
                                            <td class="text-right">@String.Format("{0:n2}", subcontractLineSalary.Sum(b => b.Key.LineSalary) + SubContractProduction.Sum(b => b.StyleSubContractAmount))</td>

                                            <td class="text-right">@String.Format("{0:n2}", SubContractsummeryProfit)</td>
                                            @*<td>&nbsp;</td>*@
                                            @*<td class="text-right">@String.Format("{0:n0}", TotalWorkingHour)</td>*@
                                        </tr>
                                    }
                                }
                                <tr class="table-thead" style="font-weight:bold;">
                                    <td class="text-right" colspan="6">Total</td>

                                    <td class="text-right">@String.Format("{0:n0}", Model.InhouseGarmentsProductionList.Sum(b => b.RcvQty))</td>
                                    <td class="text-right">@String.Format("{0:n0}", Model.InhouseGarmentsProductionList.Sum(b => b.ALterQty))</td>
                                    <td class="text-right">@String.Format("{0:n0}", Model.InhouseGarmentsProductionList.Sum(b => b.SpotQty))</td>
                                    <td class="text-right">@String.Format("{0:n0}", Model.InhouseGarmentsProductionList.Sum(b => b.RejectQty))</td>
                                    <td class="text-right">@String.Format("{0:n0}", Model.InhouseGarmentsProductionList.Sum(b => b.Ttl_Ok_Qty))</td>
                                    <td>&nbsp;</td>
                                    <td class="text-right">$ @String.Format("{0:n2}", Model.InhouseGarmentsProductionList.Sum(b => b.TotalCMDol))</td>
                                    <td class="text-right">@String.Format("{0:n2}", Model.InhouseGarmentsProductionList.Sum(b => b.TotalCMTk))</td>
                                    <td class="text-right">@String.Format("{0:n2}", Model.InhouseGarmentsProductionList.FirstOrDefault().TotalSalary)</td>
                                    <td class="text-right">@String.Format("{0:n2}", SubContractProduction.Sum(b => b.StyleSubContractAmount))</td>
                                    <td class="text-right">@String.Format("{0:n2}", Model.InhouseGarmentsProductionList.FirstOrDefault().TotalSalary + SubContractProduction.Sum(b => b.StyleSubContractAmount))</td>
                                    <td class="text-right">@String.Format("{0:n2}", TotalsummeryProfit)</td>
                                    @*<td>&nbsp;</td>*@
                                    @*<td class="text-right">@String.Format("{0:n0}", TotalWorkingHour)</td>*@
                                </tr>
                            </tbody>
                            <tfoot>

                            </tfoot>
                        </table>
                    </div>
                </div>


            </div>

        </main>
    </div>
    <div class="row noprint no-print text-center">
        <div class="col-md-12">
            <input type="button" class="btn btn-danger" value="Print" onClick="window.print()">
        </div>
    </div>
    <script src="~/AdminLTE-3.1.0-rc/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
    @*<script src="https:/ /cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
        <script src="https:/ /stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>*@

</body>
</html>
